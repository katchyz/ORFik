// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ORFs_as_List
List ORFs_as_List(CharacterVector fastaSeqs, std::string startCodon, std::string stopCodon, bool longestORF, int minimumLength);
RcppExport SEXP _ORFik_ORFs_as_List(SEXP fastaSeqsSEXP, SEXP startCodonSEXP, SEXP stopCodonSEXP, SEXP longestORFSEXP, SEXP minimumLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type fastaSeqs(fastaSeqsSEXP);
    Rcpp::traits::input_parameter< std::string >::type startCodon(startCodonSEXP);
    Rcpp::traits::input_parameter< std::string >::type stopCodon(stopCodonSEXP);
    Rcpp::traits::input_parameter< bool >::type longestORF(longestORFSEXP);
    Rcpp::traits::input_parameter< int >::type minimumLength(minimumLengthSEXP);
    rcpp_result_gen = Rcpp::wrap(ORFs_as_List(fastaSeqs, startCodon, stopCodon, longestORF, minimumLength));
    return rcpp_result_gen;
END_RCPP
}
// findORFs_procaryote
S4 findORFs_procaryote(std::string file, std::string startCodon, std::string stopCodon, bool longestORF, int minimumLength);
RcppExport SEXP _ORFik_findORFs_procaryote(SEXP fileSEXP, SEXP startCodonSEXP, SEXP stopCodonSEXP, SEXP longestORFSEXP, SEXP minimumLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type startCodon(startCodonSEXP);
    Rcpp::traits::input_parameter< std::string >::type stopCodon(stopCodonSEXP);
    Rcpp::traits::input_parameter< bool >::type longestORF(longestORFSEXP);
    Rcpp::traits::input_parameter< int >::type minimumLength(minimumLengthSEXP);
    rcpp_result_gen = Rcpp::wrap(findORFs_procaryote(file, startCodon, stopCodon, longestORF, minimumLength));
    return rcpp_result_gen;
END_RCPP
}
// orfs_as_IRanges
S4 orfs_as_IRanges(std::string& main_string, std::string s, std::string e, bool longestORF, int minimumLength);
RcppExport SEXP _ORFik_orfs_as_IRanges(SEXP main_stringSEXP, SEXP sSEXP, SEXP eSEXP, SEXP longestORFSEXP, SEXP minimumLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type main_string(main_stringSEXP);
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type e(eSEXP);
    Rcpp::traits::input_parameter< bool >::type longestORF(longestORFSEXP);
    Rcpp::traits::input_parameter< int >::type minimumLength(minimumLengthSEXP);
    rcpp_result_gen = Rcpp::wrap(orfs_as_IRanges(main_string, s, e, longestORF, minimumLength));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ORFik_ORFs_as_List", (DL_FUNC) &_ORFik_ORFs_as_List, 5},
    {"_ORFik_findORFs_procaryote", (DL_FUNC) &_ORFik_findORFs_procaryote, 5},
    {"_ORFik_orfs_as_IRanges", (DL_FUNC) &_ORFik_orfs_as_IRanges, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ORFik(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
